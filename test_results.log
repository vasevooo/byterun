============================= test session starts ==============================
platform darwin -- Python 3.5.10, pytest-6.1.2, py-1.11.0, pluggy-0.13.1
rootdir: /Users/gpbu50235/byterun
collected 78 items

tests/test_basic.py F..FF.FFF.F...F..F....F..FFF.F...F.FFF..F.........   [ 64%]
tests/test_functions.py F..F..F.........F.FFF..FFFF.                     [100%]

=================================== FAILURES ===================================
_________________________ TestIt.test_attribute_access _________________________

self = <tests.test_basic.TestIt testMethod=test_attribute_access>

    def test_attribute_access(self):
        self.assert_ok("""\
            class Thing(object):
                z = 17
                def __init__(self):
                    self.x = 23
            t = Thing()
            print(Thing.z)
            print(t.z)
            print(t.x)
>           """)

tests/test_basic.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object __init__ at 0x103cc1b70, file "<tests.test_basic.TestIt.test_attribute_access>", line 3>
  4           0 LOAD_CONST               1 (23)
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (x)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE

<code object Thing at 0x103efc390, file "<tests.test_basic.TestIt.test_attribute_access>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (17)
             15 STORE_NAME               3 (z)

  3          18 LOAD_CONST               2 (<code object __init__ at 0x103cc1b70, file "<tests.test_basic.TestIt.test_attribute_access>", line 3>)
             21 LOAD_CONST               3 ('Thing.__init__')
             24 MAKE_FUNCTION            0
             27 STORE_NAME               4 (__init__)
             30 LOAD_CONST               4 (None)
             33 RETURN_VALUE

<code object <module> at 0x103efc4b0, file "<tests.test_basic.TestIt.test_attribute_access>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x103efc390, file "<tests.test_basic.TestIt.test_attribute_access>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  5          22 LOAD_NAME                1 (Thing)
             25 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             28 STORE_NAME               2 (t)

  6          31 LOAD_NAME                3 (print)
             34 LOAD_NAME                1 (Thing)
             37 LOAD_ATTR                4 (z)
             40 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             43 POP_TOP

  7          44 LOAD_NAME                3 (print)
             47 LOAD_NAME                2 (t)
             50 LOAD_ATTR                4 (z)
             53 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             56 POP_TOP

  8          57 LOAD_NAME                3 (print)
             60 LOAD_NAME                2 (t)
             63 LOAD_ATTR                5 (x)
             66 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             69 POP_TOP
             70 LOAD_CONST               2 (None)
             73 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
__________________________ TestIt.test_bound_methods ___________________________

self = <tests.test_basic.TestIt testMethod=test_bound_methods>

    def test_bound_methods(self):
        self.assert_ok("""\
            class Thing(object):
                def meth(self, x):
                    print(x)
            t = Thing()
            m = t.meth
            m(1815)
>           """)

tests/test_basic.py:436: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object meth at 0x104841c90, file "<tests.test_basic.TestIt.test_bound_methods>", line 2>
  3           0 LOAD_GLOBAL              0 (print)
              3 LOAD_FAST                1 (x)
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE

<code object Thing at 0x104841d20, file "<tests.test_basic.TestIt.test_bound_methods>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object meth at 0x104841c90, file "<tests.test_basic.TestIt.test_bound_methods>", line 2>)
             15 LOAD_CONST               2 ('Thing.meth')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (meth)
             24 LOAD_CONST               3 (None)
             27 RETURN_VALUE

<code object <module> at 0x1048510c0, file "<tests.test_basic.TestIt.test_bound_methods>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x104841d20, file "<tests.test_basic.TestIt.test_bound_methods>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  4          22 LOAD_NAME                1 (Thing)
             25 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             28 STORE_NAME               2 (t)

  5          31 LOAD_NAME                2 (t)
             34 LOAD_ATTR                3 (meth)
             37 STORE_NAME               4 (m)

  6          40 LOAD_NAME                4 (m)
             43 LOAD_CONST               2 (1815)
             46 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             49 POP_TOP
             50 LOAD_CONST               3 (None)
             53 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
__________________________ TestIt.test_building_stuff __________________________

self = <tests.test_basic.TestIt testMethod=test_building_stuff>

    def test_building_stuff(self):
        self.assert_ok("""\
            print((1+1, 2+2, 3+3))
            """)
        self.assert_ok("""\
            print([1+1, 2+2, 3+3])
            """)
        self.assert_ok("""\
            print({1:1+1, 2:2+2, 3:3+3})
>           """)

tests/test_basic.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: "'int' object is not callable" != 'None'
E   - 'int' object is not callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <module> at 0x103efc6f0, file "<tests.test_basic.TestIt.test_building_stuff>", line 1>
  1           0 LOAD_NAME                0 (print)
              3 LOAD_CONST               7 ((2, 4, 6))
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 POP_TOP
             10 LOAD_CONST               3 (None)
             13 RETURN_VALUE
-- stdout ----------
(2, 4, 6)

<code object <module> at 0x103efc540, file "<tests.test_basic.TestIt.test_building_stuff>", line 1>
  1           0 LOAD_NAME                0 (print)
              3 LOAD_CONST               4 (2)
              6 LOAD_CONST               5 (4)
              9 LOAD_CONST               6 (6)
             12 BUILD_LIST               3
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 POP_TOP
             19 LOAD_CONST               3 (None)
             22 RETURN_VALUE
-- stdout ----------
[2, 4, 6]

<code object <module> at 0x103efc6f0, file "<tests.test_basic.TestIt.test_building_stuff>", line 1>
  1           0 LOAD_NAME                0 (print)
              3 LOAD_CONST               0 (1)
              6 LOAD_CONST               4 (2)
              9 LOAD_CONST               1 (2)
             12 LOAD_CONST               5 (4)
             15 LOAD_CONST               2 (3)
             18 LOAD_CONST               6 (6)
             21 BUILD_MAP                3
             24 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             27 POP_TOP
             28 LOAD_CONST               3 (None)
             31 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: 'int' object is not callable
______________________ TestIt.test_calling_methods_wrong _______________________

self = <tests.test_basic.TestIt testMethod=test_calling_methods_wrong>

    def test_calling_methods_wrong(self):
        self.assert_ok("""\
            class Thing(object):
                def __init__(self, x):
                    self.x = x
                def meth(self, y):
                    return self.x * y
            thing1 = Thing(2)
            print(Thing.meth(14))
>           """, raises=TypeError)

tests/test_basic.py:299: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != "meth() missing 1 required positional argument: 'y'"
E   - __build_class__: func must be a function
E   + meth() missing 1 required positional argument: 'y'
----------------------------- Captured stdout call -----------------------------

<code object __init__ at 0x104841c00, file "<tests.test_basic.TestIt.test_calling_methods_wrong>", line 2>
  3           0 LOAD_FAST                1 (x)
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (x)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE

<code object meth at 0x104841f60, file "<tests.test_basic.TestIt.test_calling_methods_wrong>", line 4>
  5           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (x)
              6 LOAD_FAST                1 (y)
              9 BINARY_MULTIPLY
             10 RETURN_VALUE

<code object Thing at 0x103efc4b0, file "<tests.test_basic.TestIt.test_calling_methods_wrong>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object __init__ at 0x104841c00, file "<tests.test_basic.TestIt.test_calling_methods_wrong>", line 2>)
             15 LOAD_CONST               2 ('Thing.__init__')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (__init__)

  4          24 LOAD_CONST               3 (<code object meth at 0x104841f60, file "<tests.test_basic.TestIt.test_calling_methods_wrong>", line 4>)
             27 LOAD_CONST               4 ('Thing.meth')
             30 MAKE_FUNCTION            0
             33 STORE_NAME               4 (meth)
             36 LOAD_CONST               5 (None)
             39 RETURN_VALUE

<code object <module> at 0x103efc660, file "<tests.test_basic.TestIt.test_calling_methods_wrong>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x103efc4b0, file "<tests.test_basic.TestIt.test_calling_methods_wrong>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  6          22 LOAD_NAME                1 (Thing)
             25 LOAD_CONST               2 (2)
             28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             31 STORE_NAME               2 (thing1)

  7          34 LOAD_NAME                3 (print)
             37 LOAD_NAME                1 (Thing)
             40 LOAD_ATTR                4 (meth)
             43 LOAD_CONST               3 (14)
             46 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             49 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             52 POP_TOP
             53 LOAD_CONST               4 (None)
             56 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
_____________________ TestIt.test_calling_subclass_methods _____________________

self = <tests.test_basic.TestIt testMethod=test_calling_subclass_methods>

    def test_calling_subclass_methods(self):
        self.assert_ok("""\
            class Thing(object):
                def foo(self):
                    return 17
    
            class SubThing(Thing):
                pass
    
            st = SubThing()
            print(st.foo())
>           """)

tests/test_basic.py:312: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object foo at 0x104841ed0, file "<tests.test_basic.TestIt.test_calling_subclass_methods>", line 2>
  3           0 LOAD_CONST               1 (17)
              3 RETURN_VALUE

<code object Thing at 0x104841db0, file "<tests.test_basic.TestIt.test_calling_subclass_methods>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object foo at 0x104841ed0, file "<tests.test_basic.TestIt.test_calling_subclass_methods>", line 2>)
             15 LOAD_CONST               2 ('Thing.foo')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (foo)
             24 LOAD_CONST               3 (None)
             27 RETURN_VALUE

<code object SubThing at 0x104841e40, file "<tests.test_basic.TestIt.test_calling_subclass_methods>", line 5>
  5           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('SubThing')
              9 STORE_NAME               2 (__qualname__)

  6          12 LOAD_CONST               1 (None)
             15 RETURN_VALUE

<code object <module> at 0x104851930, file "<tests.test_basic.TestIt.test_calling_subclass_methods>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x104841db0, file "<tests.test_basic.TestIt.test_calling_subclass_methods>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  5          22 LOAD_BUILD_CLASS
             23 LOAD_CONST               2 (<code object SubThing at 0x104841e40, file "<tests.test_basic.TestIt.test_calling_subclass_methods>", line 5>)
             26 LOAD_CONST               3 ('SubThing')
             29 MAKE_FUNCTION            0
             32 LOAD_CONST               3 ('SubThing')
             35 LOAD_NAME                1 (Thing)
             38 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             41 STORE_NAME               2 (SubThing)

  8          44 LOAD_NAME                2 (SubThing)
             47 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             50 STORE_NAME               3 (st)

  9          53 LOAD_NAME                4 (print)
             56 LOAD_NAME                3 (st)
             59 LOAD_ATTR                5 (foo)
             62 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             65 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             68 POP_TOP
             69 LOAD_CONST               4 (None)
             72 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
_____________________________ TestIt.test_classes ______________________________

self = <tests.test_basic.TestIt testMethod=test_classes>

    def test_classes(self):
        self.assert_ok("""\
            class Thing(object):
                def __init__(self, x):
                    self.x = x
                def meth(self, y):
                    return self.x * y
            thing1 = Thing(2)
            thing2 = Thing(3)
            print(thing1.x, thing2.x)
            print(thing1.meth(4), thing2.meth(5))
>           """)

tests/test_basic.py:288: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object __init__ at 0x104851300, file "<tests.test_basic.TestIt.test_classes>", line 2>
  3           0 LOAD_FAST                1 (x)
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (x)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE

<code object meth at 0x104851420, file "<tests.test_basic.TestIt.test_classes>", line 4>
  5           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (x)
              6 LOAD_FAST                1 (y)
              9 BINARY_MULTIPLY
             10 RETURN_VALUE

<code object Thing at 0x1048514b0, file "<tests.test_basic.TestIt.test_classes>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object __init__ at 0x104851300, file "<tests.test_basic.TestIt.test_classes>", line 2>)
             15 LOAD_CONST               2 ('Thing.__init__')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (__init__)

  4          24 LOAD_CONST               3 (<code object meth at 0x104851420, file "<tests.test_basic.TestIt.test_classes>", line 4>)
             27 LOAD_CONST               4 ('Thing.meth')
             30 MAKE_FUNCTION            0
             33 STORE_NAME               4 (meth)
             36 LOAD_CONST               5 (None)
             39 RETURN_VALUE

<code object <module> at 0x104851ed0, file "<tests.test_basic.TestIt.test_classes>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x1048514b0, file "<tests.test_basic.TestIt.test_classes>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  6          22 LOAD_NAME                1 (Thing)
             25 LOAD_CONST               2 (2)
             28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             31 STORE_NAME               2 (thing1)

  7          34 LOAD_NAME                1 (Thing)
             37 LOAD_CONST               3 (3)
             40 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             43 STORE_NAME               3 (thing2)

  8          46 LOAD_NAME                4 (print)
             49 LOAD_NAME                2 (thing1)
             52 LOAD_ATTR                5 (x)
             55 LOAD_NAME                3 (thing2)
             58 LOAD_ATTR                5 (x)
             61 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             64 POP_TOP

  9          65 LOAD_NAME                4 (print)
             68 LOAD_NAME                2 (thing1)
             71 LOAD_ATTR                6 (meth)
             74 LOAD_CONST               4 (4)
             77 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             80 LOAD_NAME                3 (thing2)
             83 LOAD_ATTR                6 (meth)
             86 LOAD_CONST               5 (5)
             89 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             92 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             95 POP_TOP
             96 LOAD_CONST               6 (None)
             99 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
___________ TestIt.test_data_descriptors_precede_instance_attributes ___________

self = <tests.test_basic.TestIt testMethod=test_data_descriptors_precede_instance_attributes>

    def test_data_descriptors_precede_instance_attributes(self):
        self.assert_ok("""\
            class Foo(object):
                pass
            f = Foo()
            f.des = 3
            class Descr(object):
                def __get__(self, obj, cls=None):
                    return 2
                def __set__(self, obj, val):
                    raise NotImplementedError
            Foo.des = Descr()
            assert f.des == 2
>           """)

tests/test_basic.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object Foo at 0x104841ae0, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Foo')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (None)
             15 RETURN_VALUE

<code object __get__ at 0x104841db0, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 6>
  7           0 LOAD_CONST               1 (2)
              3 RETURN_VALUE

<code object __set__ at 0x104841b70, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 8>
  9           0 LOAD_GLOBAL              0 (NotImplementedError)
              3 RAISE_VARARGS            1
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE

<code object Descr at 0x103cc1e40, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 5>
  5           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Descr')
              9 STORE_NAME               2 (__qualname__)

  6          12 LOAD_CONST               1 (None)
             15 LOAD_CONST               2 (<code object __get__ at 0x104841db0, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 6>)
             18 LOAD_CONST               3 ('Descr.__get__')
             21 MAKE_FUNCTION            1
             24 STORE_NAME               3 (__get__)

  8          27 LOAD_CONST               4 (<code object __set__ at 0x104841b70, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 8>)
             30 LOAD_CONST               5 ('Descr.__set__')
             33 MAKE_FUNCTION            0
             36 STORE_NAME               4 (__set__)
             39 LOAD_CONST               1 (None)
             42 RETURN_VALUE

<code object <module> at 0x103efc660, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Foo at 0x104841ae0, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 1>)
              4 LOAD_CONST               1 ('Foo')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Foo')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Foo)

  3          22 LOAD_NAME                1 (Foo)
             25 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             28 STORE_NAME               2 (f)

  4          31 LOAD_CONST               2 (3)
             34 LOAD_NAME                2 (f)
             37 STORE_ATTR               3 (des)

  5          40 LOAD_BUILD_CLASS
             41 LOAD_CONST               3 (<code object Descr at 0x103cc1e40, file "<tests.test_basic.TestIt.test_data_descriptors_precede_instance_attributes>", line 5>)
             44 LOAD_CONST               4 ('Descr')
             47 MAKE_FUNCTION            0
             50 LOAD_CONST               4 ('Descr')
             53 LOAD_NAME                0 (object)
             56 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             59 STORE_NAME               4 (Descr)

 10          62 LOAD_NAME                4 (Descr)
             65 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             68 LOAD_NAME                1 (Foo)
             71 STORE_ATTR               3 (des)

 11          74 LOAD_NAME                2 (f)
             77 LOAD_ATTR                3 (des)
             80 LOAD_CONST               5 (2)
             83 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_TRUE        95
             89 LOAD_GLOBAL              5 (AssertionError)
             92 RAISE_VARARGS            1
        >>   95 LOAD_CONST               6 (None)
             98 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
________________________ TestIt.test_dict_comprehension ________________________

self = <tests.test_basic.TestIt testMethod=test_dict_comprehension>

    def test_dict_comprehension(self):
        self.assert_ok("""\
            x = {z:z*z for z in range(5)}
            assert x == {0:0, 1:1, 2:4, 3:9, 4:16}
>           """)

tests/test_basic.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: 'unsupported callable' != 'None'
E   - unsupported callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <dictcomp> at 0x10485c810, file "<tests.test_basic.TestIt.test_dict_comprehension>", line 1>
  1           0 BUILD_MAP                0
              3 LOAD_FAST                0 (.0)
        >>    6 FOR_ITER                19 (to 28)
              9 STORE_FAST               1 (z)
             12 LOAD_FAST                1 (z)
             15 LOAD_FAST                1 (z)
             18 BINARY_MULTIPLY
             19 LOAD_FAST                1 (z)
             22 MAP_ADD                  2
             25 JUMP_ABSOLUTE            6
        >>   28 RETURN_VALUE

<code object <module> at 0x10485c780, file "<tests.test_basic.TestIt.test_dict_comprehension>", line 1>
  1           0 LOAD_CONST               0 (<code object <dictcomp> at 0x10485c810, file "<tests.test_basic.TestIt.test_dict_comprehension>", line 1>)
              3 LOAD_CONST               1 ('<dictcomp>')
              6 MAKE_FUNCTION            0
              9 LOAD_NAME                0 (range)
             12 LOAD_CONST               2 (5)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 GET_ITER
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             22 STORE_NAME               1 (x)

  2          25 LOAD_NAME                1 (x)
             28 LOAD_CONST               3 (0)
             31 LOAD_CONST               3 (0)
             34 LOAD_CONST               4 (1)
             37 LOAD_CONST               4 (1)
             40 LOAD_CONST               5 (2)
             43 LOAD_CONST               6 (4)
             46 LOAD_CONST               7 (3)
             49 LOAD_CONST               8 (9)
             52 LOAD_CONST               6 (4)
             55 LOAD_CONST               9 (16)
             58 BUILD_MAP                5
             61 COMPARE_OP               2 (==)
             64 POP_JUMP_IF_TRUE        73
             67 LOAD_GLOBAL              2 (AssertionError)
             70 RAISE_VARARGS            1
        >>   73 LOAD_CONST              10 (None)
             76 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1094, in getfullargspec
    sigcls=Signature)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2237, in _signature_from_callable
    return _signature_from_function(sigcls, obj)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2108, in _signature_from_function
    kind=_POSITIONAL_OR_KEYWORD))
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2431, in __init__
    raise ValueError('{!r} is not a valid parameter name'.format(name))
ValueError: '.0' is not a valid parameter name

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 57, in __call__
    callargs = inspect.getcallargs(self._func, *args, **kwargs)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1290, in getcallargs
    spec = getfullargspec(func)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1100, in getfullargspec
    raise TypeError('unsupported callable') from ex
TypeError: unsupported callable
_______________________ TestIt.test_generator_expression _______________________

self = <tests.test_basic.TestIt testMethod=test_generator_expression>

    def test_generator_expression(self):
        self.assert_ok("""\
            x = "-".join(str(z) for z in range(5))
            assert x == "0-1-2-3-4"
>           """)

tests/test_basic.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: 'unsupported callable' != 'None'
E   - unsupported callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <genexpr> at 0x104841c00, file "<tests.test_basic.TestIt.test_generator_expression>", line 1>
  1           0 LOAD_FAST                0 (.0)
        >>    3 FOR_ITER                17 (to 23)
              6 STORE_FAST               1 (z)
              9 LOAD_GLOBAL              0 (str)
             12 LOAD_FAST                1 (z)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 YIELD_VALUE
             19 POP_TOP
             20 JUMP_ABSOLUTE            3
        >>   23 LOAD_CONST               0 (None)
             26 RETURN_VALUE

<code object <module> at 0x10485c6f0, file "<tests.test_basic.TestIt.test_generator_expression>", line 1>
  1           0 LOAD_CONST               0 ('-')
              3 LOAD_ATTR                0 (join)
              6 LOAD_CONST               1 (<code object <genexpr> at 0x104841c00, file "<tests.test_basic.TestIt.test_generator_expression>", line 1>)
              9 LOAD_CONST               2 ('<genexpr>')
             12 MAKE_FUNCTION            0
             15 LOAD_NAME                1 (range)
             18 LOAD_CONST               3 (5)
             21 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             24 GET_ITER
             25 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             31 STORE_NAME               2 (x)

  2          34 LOAD_NAME                2 (x)
             37 LOAD_CONST               4 ('0-1-2-3-4')
             40 COMPARE_OP               2 (==)
             43 POP_JUMP_IF_TRUE        52
             46 LOAD_GLOBAL              3 (AssertionError)
             49 RAISE_VARARGS            1
        >>   52 LOAD_CONST               5 (None)
             55 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1094, in getfullargspec
    sigcls=Signature)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2237, in _signature_from_callable
    return _signature_from_function(sigcls, obj)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2108, in _signature_from_function
    kind=_POSITIONAL_OR_KEYWORD))
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2431, in __init__
    raise ValueError('{!r} is not a valid parameter name'.format(name))
ValueError: '.0' is not a valid parameter name

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 57, in __call__
    callargs = inspect.getcallargs(self._func, *args, **kwargs)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1290, in getcallargs
    spec = getfullargspec(func)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1100, in getfullargspec
    raise TypeError('unsupported callable') from ex
TypeError: unsupported callable
___________ TestIt.test_instance_attrs_precede_non_data_descriptors ____________

self = <tests.test_basic.TestIt testMethod=test_instance_attrs_precede_non_data_descriptors>

    def test_instance_attrs_precede_non_data_descriptors(self):
        self.assert_ok("""\
            class Foo(object):
                pass
            f = Foo()
            f.des = 3
            class Descr(object):
                def __get__(self, obj, cls=None):
                    return 2
            Foo.des = Descr()
            assert f.des == 3
>           """)

tests/test_basic.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object Foo at 0x104851c90, file "<tests.test_basic.TestIt.test_instance_attrs_precede_non_data_descriptors>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Foo')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (None)
             15 RETURN_VALUE

<code object __get__ at 0x104851b70, file "<tests.test_basic.TestIt.test_instance_attrs_precede_non_data_descriptors>", line 6>
  7           0 LOAD_CONST               1 (2)
              3 RETURN_VALUE

<code object Descr at 0x104851780, file "<tests.test_basic.TestIt.test_instance_attrs_precede_non_data_descriptors>", line 5>
  5           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Descr')
              9 STORE_NAME               2 (__qualname__)

  6          12 LOAD_CONST               1 (None)
             15 LOAD_CONST               2 (<code object __get__ at 0x104851b70, file "<tests.test_basic.TestIt.test_instance_attrs_precede_non_data_descriptors>", line 6>)
             18 LOAD_CONST               3 ('Descr.__get__')
             21 MAKE_FUNCTION            1
             24 STORE_NAME               3 (__get__)
             27 LOAD_CONST               1 (None)
             30 RETURN_VALUE

<code object <module> at 0x10485c150, file "<tests.test_basic.TestIt.test_instance_attrs_precede_non_data_descriptors>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Foo at 0x104851c90, file "<tests.test_basic.TestIt.test_instance_attrs_precede_non_data_descriptors>", line 1>)
              4 LOAD_CONST               1 ('Foo')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Foo')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Foo)

  3          22 LOAD_NAME                1 (Foo)
             25 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             28 STORE_NAME               2 (f)

  4          31 LOAD_CONST               2 (3)
             34 LOAD_NAME                2 (f)
             37 STORE_ATTR               3 (des)

  5          40 LOAD_BUILD_CLASS
             41 LOAD_CONST               3 (<code object Descr at 0x104851780, file "<tests.test_basic.TestIt.test_instance_attrs_precede_non_data_descriptors>", line 5>)
             44 LOAD_CONST               4 ('Descr')
             47 MAKE_FUNCTION            0
             50 LOAD_CONST               4 ('Descr')
             53 LOAD_NAME                0 (object)
             56 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             59 STORE_NAME               4 (Descr)

  8          62 LOAD_NAME                4 (Descr)
             65 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             68 LOAD_NAME                1 (Foo)
             71 STORE_ATTR               3 (des)

  9          74 LOAD_NAME                2 (f)
             77 LOAD_ATTR                3 (des)
             80 LOAD_CONST               2 (3)
             83 COMPARE_OP               2 (==)
             86 POP_JUMP_IF_TRUE        95
             89 LOAD_GLOBAL              5 (AssertionError)
             92 RAISE_VARARGS            1
        >>   95 LOAD_CONST               5 (None)
             98 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
________________________ TestIt.test_list_comprehension ________________________

self = <tests.test_basic.TestIt testMethod=test_list_comprehension>

    def test_list_comprehension(self):
        self.assert_ok("""\
            x = [z*z for z in range(5)]
            assert x == [0, 1, 4, 9, 16]
>           """)

tests/test_basic.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: 'unsupported callable' != 'None'
E   - unsupported callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <listcomp> at 0x104841f60, file "<tests.test_basic.TestIt.test_list_comprehension>", line 1>
  1           0 BUILD_LIST               0
              3 LOAD_FAST                0 (.0)
        >>    6 FOR_ITER                16 (to 25)
              9 STORE_FAST               1 (z)
             12 LOAD_FAST                1 (z)
             15 LOAD_FAST                1 (z)
             18 BINARY_MULTIPLY
             19 LIST_APPEND              2
             22 JUMP_ABSOLUTE            6
        >>   25 RETURN_VALUE

<code object <module> at 0x103efc4b0, file "<tests.test_basic.TestIt.test_list_comprehension>", line 1>
  1           0 LOAD_CONST               0 (<code object <listcomp> at 0x104841f60, file "<tests.test_basic.TestIt.test_list_comprehension>", line 1>)
              3 LOAD_CONST               1 ('<listcomp>')
              6 MAKE_FUNCTION            0
              9 LOAD_NAME                0 (range)
             12 LOAD_CONST               2 (5)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 GET_ITER
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             22 STORE_NAME               1 (x)

  2          25 LOAD_NAME                1 (x)
             28 LOAD_CONST               3 (0)
             31 LOAD_CONST               4 (1)
             34 LOAD_CONST               5 (4)
             37 LOAD_CONST               6 (9)
             40 LOAD_CONST               7 (16)
             43 BUILD_LIST               5
             46 COMPARE_OP               2 (==)
             49 POP_JUMP_IF_TRUE        58
             52 LOAD_GLOBAL              2 (AssertionError)
             55 RAISE_VARARGS            1
        >>   58 LOAD_CONST               8 (None)
             61 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1094, in getfullargspec
    sigcls=Signature)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2237, in _signature_from_callable
    return _signature_from_function(sigcls, obj)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2108, in _signature_from_function
    kind=_POSITIONAL_OR_KEYWORD))
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2431, in __init__
    raise ValueError('{!r} is not a valid parameter name'.format(name))
ValueError: '.0' is not a valid parameter name

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 57, in __call__
    callargs = inspect.getcallargs(self._func, *args, **kwargs)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1290, in getcallargs
    spec = getfullargspec(func)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1100, in getfullargspec
    raise TypeError('unsupported callable') from ex
TypeError: unsupported callable
_________________________ TestIt.test_multiple_classes _________________________

self = <tests.test_basic.TestIt testMethod=test_multiple_classes>

    def test_multiple_classes(self):
        # Making classes used to mix together all the class-scoped values
        # across classes.  This test would fail because A.__init__ would be
        # over-written with B.__init__, and A(1, 2, 3) would complain about
        # too many arguments.
        self.assert_ok("""\
            class A(object):
                def __init__(self, a, b, c):
                    self.sum = a + b + c
    
            class B(object):
                def __init__(self, x):
                    self.x = x
    
            a = A(1, 2, 3)
            b = B(7)
            print(a.sum)
            print(b.x)
>           """)

tests/test_basic.py:526: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object __init__ at 0x10485c6f0, file "<tests.test_basic.TestIt.test_multiple_classes>", line 2>
  3           0 LOAD_FAST                1 (a)
              3 LOAD_FAST                2 (b)
              6 BINARY_ADD
              7 LOAD_FAST                3 (c)
             10 BINARY_ADD
             11 LOAD_FAST                0 (self)
             14 STORE_ATTR               0 (sum)
             17 LOAD_CONST               0 (None)
             20 RETURN_VALUE

<code object A at 0x10485c5d0, file "<tests.test_basic.TestIt.test_multiple_classes>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('A')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object __init__ at 0x10485c6f0, file "<tests.test_basic.TestIt.test_multiple_classes>", line 2>)
             15 LOAD_CONST               2 ('A.__init__')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (__init__)
             24 LOAD_CONST               3 (None)
             27 RETURN_VALUE

<code object __init__ at 0x10485ca50, file "<tests.test_basic.TestIt.test_multiple_classes>", line 6>
  7           0 LOAD_FAST                1 (x)
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (x)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE

<code object B at 0x10485c780, file "<tests.test_basic.TestIt.test_multiple_classes>", line 5>
  5           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('B')
              9 STORE_NAME               2 (__qualname__)

  6          12 LOAD_CONST               1 (<code object __init__ at 0x10485ca50, file "<tests.test_basic.TestIt.test_multiple_classes>", line 6>)
             15 LOAD_CONST               2 ('B.__init__')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (__init__)
             24 LOAD_CONST               3 (None)
             27 RETURN_VALUE

<code object <module> at 0x10485c8a0, file "<tests.test_basic.TestIt.test_multiple_classes>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object A at 0x10485c5d0, file "<tests.test_basic.TestIt.test_multiple_classes>", line 1>)
              4 LOAD_CONST               1 ('A')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('A')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (A)

  5          22 LOAD_BUILD_CLASS
             23 LOAD_CONST               2 (<code object B at 0x10485c780, file "<tests.test_basic.TestIt.test_multiple_classes>", line 5>)
             26 LOAD_CONST               3 ('B')
             29 MAKE_FUNCTION            0
             32 LOAD_CONST               3 ('B')
             35 LOAD_NAME                0 (object)
             38 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             41 STORE_NAME               2 (B)

  9          44 LOAD_NAME                1 (A)
             47 LOAD_CONST               4 (1)
             50 LOAD_CONST               5 (2)
             53 LOAD_CONST               6 (3)
             56 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             59 STORE_NAME               3 (a)

 10          62 LOAD_NAME                2 (B)
             65 LOAD_CONST               7 (7)
             68 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             71 STORE_NAME               4 (b)

 11          74 LOAD_NAME                5 (print)
             77 LOAD_NAME                3 (a)
             80 LOAD_ATTR                6 (sum)
             83 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             86 POP_TOP

 12          87 LOAD_NAME                5 (print)
             90 LOAD_NAME                4 (b)
             93 LOAD_ATTR                7 (x)
             96 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             99 POP_TOP
            100 LOAD_CONST               8 (None)
            103 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
________________ TestIt.test_object_attrs_not_shared_with_class ________________

self = <tests.test_basic.TestIt testMethod=test_object_attrs_not_shared_with_class>

    def test_object_attrs_not_shared_with_class(self):
        self.assert_ok("""\
            class Thing(object):
                pass
            t = Thing()
            t.foo = 1
>           Thing.foo""", raises=AttributeError)

tests/test_basic.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != "type object 'Thing' has no attribute 'foo'"
E   - __build_class__: func must be a function
E   + type object 'Thing' has no attribute 'foo'
----------------------------- Captured stdout call -----------------------------

<code object Thing at 0x10485c540, file "<tests.test_basic.TestIt.test_object_attrs_not_shared_with_class>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (None)
             15 RETURN_VALUE

<code object <module> at 0x1048515d0, file "<tests.test_basic.TestIt.test_object_attrs_not_shared_with_class>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x10485c540, file "<tests.test_basic.TestIt.test_object_attrs_not_shared_with_class>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  3          22 LOAD_NAME                1 (Thing)
             25 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             28 STORE_NAME               2 (t)

  4          31 LOAD_CONST               2 (1)
             34 LOAD_NAME                2 (t)
             37 STORE_ATTR               3 (foo)

  5          40 LOAD_NAME                1 (Thing)
             43 LOAD_ATTR                3 (foo)
             46 POP_TOP
             47 LOAD_CONST               3 (None)
             50 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
________________________ TestIt.test_set_comprehension _________________________

self = <tests.test_basic.TestIt testMethod=test_set_comprehension>

    def test_set_comprehension(self):
        self.assert_ok("""\
            x = {z*z for z in range(5)}
            assert x == {0, 1, 4, 9, 16}
>           """)

tests/test_basic.py:206: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: 'unsupported callable' != 'None'
E   - unsupported callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <setcomp> at 0x104886e40, file "<tests.test_basic.TestIt.test_set_comprehension>", line 1>
  1           0 BUILD_SET                0
              3 LOAD_FAST                0 (.0)
        >>    6 FOR_ITER                16 (to 25)
              9 STORE_FAST               1 (z)
             12 LOAD_FAST                1 (z)
             15 LOAD_FAST                1 (z)
             18 BINARY_MULTIPLY
             19 SET_ADD                  2
             22 JUMP_ABSOLUTE            6
        >>   25 RETURN_VALUE

<code object <module> at 0x1048869c0, file "<tests.test_basic.TestIt.test_set_comprehension>", line 1>
  1           0 LOAD_CONST               0 (<code object <setcomp> at 0x104886e40, file "<tests.test_basic.TestIt.test_set_comprehension>", line 1>)
              3 LOAD_CONST               1 ('<setcomp>')
              6 MAKE_FUNCTION            0
              9 LOAD_NAME                0 (range)
             12 LOAD_CONST               2 (5)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 GET_ITER
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             22 STORE_NAME               1 (x)

  2          25 LOAD_NAME                1 (x)
             28 LOAD_CONST               3 (0)
             31 LOAD_CONST               4 (1)
             34 LOAD_CONST               5 (4)
             37 LOAD_CONST               6 (9)
             40 LOAD_CONST               7 (16)
             43 BUILD_SET                5
             46 COMPARE_OP               2 (==)
             49 POP_JUMP_IF_TRUE        58
             52 LOAD_GLOBAL              2 (AssertionError)
             55 RAISE_VARARGS            1
        >>   58 LOAD_CONST               8 (None)
             61 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1094, in getfullargspec
    sigcls=Signature)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2237, in _signature_from_callable
    return _signature_from_function(sigcls, obj)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2108, in _signature_from_function
    kind=_POSITIONAL_OR_KEYWORD))
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2431, in __init__
    raise ValueError('{!r} is not a valid parameter name'.format(name))
ValueError: '.0' is not a valid parameter name

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 57, in __call__
    callargs = inspect.getcallargs(self._func, *args, **kwargs)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1290, in getcallargs
    spec = getfullargspec(func)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1100, in getfullargspec
    raise TypeError('unsupported callable') from ex
TypeError: unsupported callable
__________________________ TestIt.test_staticmethods ___________________________

self = <tests.test_basic.TestIt testMethod=test_staticmethods>

    def test_staticmethods(self):
        self.assert_ok("""\
            class Thing(object):
                @staticmethod
                def smeth(x):
                    print(x)
                @classmethod
                def cmeth(cls, x):
                    print(x)
    
            Thing.smeth(1492)
            Thing.cmeth(1776)
>           """)

tests/test_basic.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object smeth at 0x10485c5d0, file "<tests.test_basic.TestIt.test_staticmethods>", line 2>
  4           0 LOAD_GLOBAL              0 (print)
              3 LOAD_FAST                0 (x)
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE

<code object cmeth at 0x10485c540, file "<tests.test_basic.TestIt.test_staticmethods>", line 5>
  7           0 LOAD_GLOBAL              0 (print)
              3 LOAD_FAST                1 (x)
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE

<code object Thing at 0x10485c8a0, file "<tests.test_basic.TestIt.test_staticmethods>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_NAME                3 (staticmethod)
             15 LOAD_CONST               1 (<code object smeth at 0x10485c5d0, file "<tests.test_basic.TestIt.test_staticmethods>", line 2>)
             18 LOAD_CONST               2 ('Thing.smeth')
             21 MAKE_FUNCTION            0
             24 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             27 STORE_NAME               4 (smeth)

  5          30 LOAD_NAME                5 (classmethod)
             33 LOAD_CONST               3 (<code object cmeth at 0x10485c540, file "<tests.test_basic.TestIt.test_staticmethods>", line 5>)
             36 LOAD_CONST               4 ('Thing.cmeth')
             39 MAKE_FUNCTION            0
             42 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             45 STORE_NAME               6 (cmeth)
             48 LOAD_CONST               5 (None)
             51 RETURN_VALUE

<code object <module> at 0x10485c780, file "<tests.test_basic.TestIt.test_staticmethods>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x10485c8a0, file "<tests.test_basic.TestIt.test_staticmethods>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  9          22 LOAD_NAME                1 (Thing)
             25 LOAD_ATTR                2 (smeth)
             28 LOAD_CONST               2 (1492)
             31 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             34 POP_TOP

 10          35 LOAD_NAME                1 (Thing)
             38 LOAD_ATTR                3 (cmeth)
             41 LOAD_CONST               3 (1776)
             44 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             47 POP_TOP
             48 LOAD_CONST               4 (None)
             51 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
________________________ TestIt.test_subclass_attribute ________________________

self = <tests.test_basic.TestIt testMethod=test_subclass_attribute>

    def test_subclass_attribute(self):
        self.assert_ok("""\
            class Thing(object):
                def __init__(self):
                    self.foo = 17
            class SubThing(Thing):
                pass
            st = SubThing()
            print(st.foo)
>           """)

tests/test_basic.py:323: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object __init__ at 0x103e06420, file "<tests.test_basic.TestIt.test_subclass_attribute>", line 2>
  3           0 LOAD_CONST               1 (17)
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (foo)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE

<code object Thing at 0x104886a50, file "<tests.test_basic.TestIt.test_subclass_attribute>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object __init__ at 0x103e06420, file "<tests.test_basic.TestIt.test_subclass_attribute>", line 2>)
             15 LOAD_CONST               2 ('Thing.__init__')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (__init__)
             24 LOAD_CONST               3 (None)
             27 RETURN_VALUE

<code object SubThing at 0x104886c90, file "<tests.test_basic.TestIt.test_subclass_attribute>", line 4>
  4           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('SubThing')
              9 STORE_NAME               2 (__qualname__)

  5          12 LOAD_CONST               1 (None)
             15 RETURN_VALUE

<code object <module> at 0x104886d20, file "<tests.test_basic.TestIt.test_subclass_attribute>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x104886a50, file "<tests.test_basic.TestIt.test_subclass_attribute>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  4          22 LOAD_BUILD_CLASS
             23 LOAD_CONST               2 (<code object SubThing at 0x104886c90, file "<tests.test_basic.TestIt.test_subclass_attribute>", line 4>)
             26 LOAD_CONST               3 ('SubThing')
             29 MAKE_FUNCTION            0
             32 LOAD_CONST               3 ('SubThing')
             35 LOAD_NAME                1 (Thing)
             38 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             41 STORE_NAME               2 (SubThing)

  6          44 LOAD_NAME                2 (SubThing)
             47 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             50 STORE_NAME               3 (st)

  7          53 LOAD_NAME                4 (print)
             56 LOAD_NAME                3 (st)
             59 LOAD_ATTR                5 (foo)
             62 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             65 POP_TOP
             66 LOAD_CONST               4 (None)
             69 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
___________________ TestIt.test_subclass_attributes_dynamic ____________________

self = <tests.test_basic.TestIt testMethod=test_subclass_attributes_dynamic>

    def test_subclass_attributes_dynamic(self):
        self.assert_ok("""\
            class Foo(object):
                pass
            class Bar(Foo):
                pass
            b = Bar()
            Foo.baz = 3
            assert b.baz == 3
>           """)

tests/test_basic.py:382: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object Foo at 0x103b99300, file "<tests.test_basic.TestIt.test_subclass_attributes_dynamic>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Foo')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (None)
             15 RETURN_VALUE

<code object Bar at 0x103b99270, file "<tests.test_basic.TestIt.test_subclass_attributes_dynamic>", line 3>
  3           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Bar')
              9 STORE_NAME               2 (__qualname__)

  4          12 LOAD_CONST               1 (None)
             15 RETURN_VALUE

<code object <module> at 0x103b990c0, file "<tests.test_basic.TestIt.test_subclass_attributes_dynamic>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Foo at 0x103b99300, file "<tests.test_basic.TestIt.test_subclass_attributes_dynamic>", line 1>)
              4 LOAD_CONST               1 ('Foo')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Foo')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Foo)

  3          22 LOAD_BUILD_CLASS
             23 LOAD_CONST               2 (<code object Bar at 0x103b99270, file "<tests.test_basic.TestIt.test_subclass_attributes_dynamic>", line 3>)
             26 LOAD_CONST               3 ('Bar')
             29 MAKE_FUNCTION            0
             32 LOAD_CONST               3 ('Bar')
             35 LOAD_NAME                1 (Foo)
             38 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             41 STORE_NAME               2 (Bar)

  5          44 LOAD_NAME                2 (Bar)
             47 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             50 STORE_NAME               3 (b)

  6          53 LOAD_CONST               4 (3)
             56 LOAD_NAME                1 (Foo)
             59 STORE_ATTR               4 (baz)

  7          62 LOAD_NAME                3 (b)
             65 LOAD_ATTR                4 (baz)
             68 LOAD_CONST               4 (3)
             71 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_TRUE        83
             77 LOAD_GLOBAL              5 (AssertionError)
             80 RAISE_VARARGS            1
        >>   83 LOAD_CONST               5 (None)
             86 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
__________________ TestIt.test_subclass_attributes_not_shared __________________

self = <tests.test_basic.TestIt testMethod=test_subclass_attributes_not_shared>

    def test_subclass_attributes_not_shared(self):
        self.assert_ok("""\
            class Thing(object):
                foo = 17
            class SubThing(Thing):
                foo = 25
            st = SubThing()
            t = Thing()
            assert st.foo == 25
            assert t.foo == 17
>           """)

tests/test_basic.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object Thing at 0x103ba54b0, file "<tests.test_basic.TestIt.test_subclass_attributes_not_shared>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (17)
             15 STORE_NAME               3 (foo)
             18 LOAD_CONST               2 (None)
             21 RETURN_VALUE

<code object SubThing at 0x103ba5540, file "<tests.test_basic.TestIt.test_subclass_attributes_not_shared>", line 3>
  3           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('SubThing')
              9 STORE_NAME               2 (__qualname__)

  4          12 LOAD_CONST               1 (25)
             15 STORE_NAME               3 (foo)
             18 LOAD_CONST               2 (None)
             21 RETURN_VALUE

<code object <module> at 0x103ba5300, file "<tests.test_basic.TestIt.test_subclass_attributes_not_shared>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x103ba54b0, file "<tests.test_basic.TestIt.test_subclass_attributes_not_shared>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  3          22 LOAD_BUILD_CLASS
             23 LOAD_CONST               2 (<code object SubThing at 0x103ba5540, file "<tests.test_basic.TestIt.test_subclass_attributes_not_shared>", line 3>)
             26 LOAD_CONST               3 ('SubThing')
             29 MAKE_FUNCTION            0
             32 LOAD_CONST               3 ('SubThing')
             35 LOAD_NAME                1 (Thing)
             38 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             41 STORE_NAME               2 (SubThing)

  5          44 LOAD_NAME                2 (SubThing)
             47 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             50 STORE_NAME               3 (st)

  6          53 LOAD_NAME                1 (Thing)
             56 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             59 STORE_NAME               4 (t)

  7          62 LOAD_NAME                3 (st)
             65 LOAD_ATTR                5 (foo)
             68 LOAD_CONST               4 (25)
             71 COMPARE_OP               2 (==)
             74 POP_JUMP_IF_TRUE        83
             77 LOAD_GLOBAL              6 (AssertionError)
             80 RAISE_VARARGS            1

  8     >>   83 LOAD_NAME                4 (t)
             86 LOAD_ATTR                5 (foo)
             89 LOAD_CONST               5 (17)
             92 COMPARE_OP               2 (==)
             95 POP_JUMP_IF_TRUE       104
             98 LOAD_GLOBAL              6 (AssertionError)
            101 RAISE_VARARGS            1
        >>  104 LOAD_CONST               6 (None)
            107 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
_________________________ TestIt.test_unbound_methods __________________________

self = <tests.test_basic.TestIt testMethod=test_unbound_methods>

    def test_unbound_methods(self):
        self.assert_ok("""\
            class Thing(object):
                def meth(self, x):
                    print(x)
            m = Thing.meth
            m(Thing(), 1815)
>           """)

tests/test_basic.py:426: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object meth at 0x103ba3e40, file "<tests.test_basic.TestIt.test_unbound_methods>", line 2>
  3           0 LOAD_GLOBAL              0 (print)
              3 LOAD_FAST                1 (x)
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE

<code object Thing at 0x104886e40, file "<tests.test_basic.TestIt.test_unbound_methods>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object meth at 0x103ba3e40, file "<tests.test_basic.TestIt.test_unbound_methods>", line 2>)
             15 LOAD_CONST               2 ('Thing.meth')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (meth)
             24 LOAD_CONST               3 (None)
             27 RETURN_VALUE

<code object <module> at 0x104886b70, file "<tests.test_basic.TestIt.test_unbound_methods>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x104886e40, file "<tests.test_basic.TestIt.test_unbound_methods>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

  4          22 LOAD_NAME                1 (Thing)
             25 LOAD_ATTR                2 (meth)
             28 STORE_NAME               3 (m)

  5          31 LOAD_NAME                3 (m)
             34 LOAD_NAME                1 (Thing)
             37 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             40 LOAD_CONST               2 (1815)
             43 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             46 POP_TOP
             47 LOAD_CONST               3 (None)
             50 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
____________ TestFunctions.test_calling_functions_with_args_kwargs _____________

self = <tests.test_functions.TestFunctions testMethod=test_calling_functions_with_args_kwargs>

    def test_calling_functions_with_args_kwargs(self):
        self.assert_ok("""\
            def fn(a, b=17, c="Hello", d=[]):
                d.append(99)
                print(a, b, c, d)
            fn(6, *[77, 88])
            fn(**{'c': 23, 'a': 7})
            fn(6, *[77], **{'c': 23, 'd': [123]})
>           """)

tests/test_functions.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: "'int' object is not callable" != 'None'
E   - 'int' object is not callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object fn at 0x103b99030, file "<tests.test_functions.TestFunctions.test_calling_functions_with_args_kwargs>", line 1>
  2           0 LOAD_FAST                3 (d)
              3 LOAD_ATTR                0 (append)
              6 LOAD_CONST               1 (99)
              9 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             12 POP_TOP

  3          13 LOAD_GLOBAL              1 (print)
             16 LOAD_FAST                0 (a)
             19 LOAD_FAST                1 (b)
             22 LOAD_FAST                2 (c)
             25 LOAD_FAST                3 (d)
             28 CALL_FUNCTION            4 (4 positional, 0 keyword pair)
             31 POP_TOP
             32 LOAD_CONST               0 (None)
             35 RETURN_VALUE

<code object <module> at 0x103b99150, file "<tests.test_functions.TestFunctions.test_calling_functions_with_args_kwargs>", line 1>
  1           0 LOAD_CONST               0 (17)
              3 LOAD_CONST               1 ('Hello')
              6 BUILD_LIST               0
              9 LOAD_CONST               2 (<code object fn at 0x103b99030, file "<tests.test_functions.TestFunctions.test_calling_functions_with_args_kwargs>", line 1>)
             12 LOAD_CONST               3 ('fn')
             15 MAKE_FUNCTION            3
             18 STORE_NAME               0 (fn)

  4          21 LOAD_NAME                0 (fn)
             24 LOAD_CONST               4 (6)
             27 LOAD_CONST               5 (77)
             30 LOAD_CONST               6 (88)
             33 BUILD_LIST               2
             36 CALL_FUNCTION_VAR        1 (1 positional, 0 keyword pair)
             39 POP_TOP

  5          40 LOAD_NAME                0 (fn)
             43 LOAD_CONST               7 ('c')
             46 LOAD_CONST               8 (23)
             49 LOAD_CONST               9 ('a')
             52 LOAD_CONST              10 (7)
             55 BUILD_MAP                2
             58 CALL_FUNCTION_KW         0 (0 positional, 0 keyword pair)
             61 POP_TOP

  6          62 LOAD_NAME                0 (fn)
             65 LOAD_CONST               4 (6)
             68 LOAD_CONST               5 (77)
             71 BUILD_LIST               1
             74 LOAD_CONST               7 ('c')
             77 LOAD_CONST               8 (23)
             80 LOAD_CONST              11 ('d')
             83 LOAD_CONST              12 (123)
             86 BUILD_LIST               1
             89 BUILD_MAP                2
             92 CALL_FUNCTION_VAR_KW     1 (1 positional, 0 keyword pair)
             95 POP_TOP
             96 LOAD_CONST              13 (None)
             99 RETURN_VALUE
-- stdout ----------
6 77 88 [99]
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 863, in byte_CALL_FUNCTION_KW
    return self.call_function(arg, [], kwargs)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: 'int' object is not callable
_______ TestFunctions.test_different_globals_may_have_different_builtins _______

self = <tests.test_functions.TestFunctions testMethod=test_different_globals_may_have_different_builtins>

    def test_different_globals_may_have_different_builtins(self):
        self.assert_ok("""\
            def replace_globals(f, new_globals):
                import sys
                if sys.version_info.major == 2:
                    args = [
                        f.func_code,
                        new_globals,
                        f.func_name,
                        f.func_defaults,
                        f.func_closure,
                    ]
                else:
                    args = [
                        f.__code__,
                        new_globals,
                        f.__name__,
                        f.__defaults__,
                        f.__closure__,
                    ]
                if hasattr(f, '_vm'):
                    name = args.remove(args[2])
                    args.insert(0, name)
                    args.append(f._vm)
                return type(lambda: None)(*args)
    
    
            def f():
                assert g() == 2
                assert a == 1
    
    
            def g():
                return a  # a is in the builtins and set to 2
    
    
            # g and f have different builtins that both provide ``a``.
            g = replace_globals(g, {'__builtins__': {'a': 2}})
            f = replace_globals(f, {'__builtins__': {'a': 1}, 'g': g})
    
    
            f()
>           """)

tests/test_functions.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: "'int' object is not callable" != 'None'
E   - 'int' object is not callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <lambda> at 0x104886db0, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 23>
 23           0 LOAD_CONST               0 (None)
              3 RETURN_VALUE

<code object replace_globals at 0x103b95f60, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 1>
  2           0 LOAD_CONST               1 (0)
              3 LOAD_CONST               0 (None)
              6 IMPORT_NAME              0 (sys)
              9 STORE_FAST               2 (sys)

  3          12 LOAD_FAST                2 (sys)
             15 LOAD_ATTR                1 (version_info)
             18 LOAD_ATTR                2 (major)
             21 LOAD_CONST               2 (2)
             24 COMPARE_OP               2 (==)
             27 POP_JUMP_IF_FALSE       66

  5          30 LOAD_FAST                0 (f)
             33 LOAD_ATTR                3 (func_code)

  6          36 LOAD_FAST                1 (new_globals)

  7          39 LOAD_FAST                0 (f)
             42 LOAD_ATTR                4 (func_name)

  8          45 LOAD_FAST                0 (f)
             48 LOAD_ATTR                5 (func_defaults)

  9          51 LOAD_FAST                0 (f)
             54 LOAD_ATTR                6 (func_closure)
             57 BUILD_LIST               5
             60 STORE_FAST               3 (args)
             63 JUMP_FORWARD            33 (to 99)

 13     >>   66 LOAD_FAST                0 (f)
             69 LOAD_ATTR                7 (__code__)

 14          72 LOAD_FAST                1 (new_globals)

 15          75 LOAD_FAST                0 (f)
             78 LOAD_ATTR                8 (__name__)

 16          81 LOAD_FAST                0 (f)
             84 LOAD_ATTR                9 (__defaults__)

 17          87 LOAD_FAST                0 (f)
             90 LOAD_ATTR               10 (__closure__)
             93 BUILD_LIST               5
             96 STORE_FAST               3 (args)

 19     >>   99 LOAD_GLOBAL             11 (hasattr)
            102 LOAD_FAST                0 (f)
            105 LOAD_CONST               3 ('_vm')
            108 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
            111 POP_JUMP_IF_FALSE      165

 20         114 LOAD_FAST                3 (args)
            117 LOAD_ATTR               12 (remove)
            120 LOAD_FAST                3 (args)
            123 LOAD_CONST               2 (2)
            126 BINARY_SUBSCR
            127 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
            130 STORE_FAST               4 (name)

 21         133 LOAD_FAST                3 (args)
            136 LOAD_ATTR               13 (insert)
            139 LOAD_CONST               1 (0)
            142 LOAD_FAST                4 (name)
            145 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
            148 POP_TOP

 22         149 LOAD_FAST                3 (args)
            152 LOAD_ATTR               14 (append)
            155 LOAD_FAST                0 (f)
            158 LOAD_ATTR               15 (_vm)
            161 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
            164 POP_TOP

 23     >>  165 LOAD_GLOBAL             16 (type)
            168 LOAD_CONST               4 (<code object <lambda> at 0x104886db0, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 23>)
            171 LOAD_CONST               5 ('replace_globals.<locals>.<lambda>')
            174 MAKE_FUNCTION            0
            177 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
            180 LOAD_FAST                3 (args)
            183 CALL_FUNCTION_VAR        0 (0 positional, 0 keyword pair)
            186 RETURN_VALUE

<code object f at 0x103b95b70, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 26>
 27           0 LOAD_GLOBAL              0 (g)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 LOAD_CONST               1 (2)
              9 COMPARE_OP               2 (==)
             12 POP_JUMP_IF_TRUE        21
             15 LOAD_GLOBAL              1 (AssertionError)
             18 RAISE_VARARGS            1

 28     >>   21 LOAD_GLOBAL              2 (a)
             24 LOAD_CONST               2 (1)
             27 COMPARE_OP               2 (==)
             30 POP_JUMP_IF_TRUE        39
             33 LOAD_GLOBAL              1 (AssertionError)
             36 RAISE_VARARGS            1
        >>   39 LOAD_CONST               0 (None)
             42 RETURN_VALUE

<code object g at 0x10485c6f0, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 31>
 32           0 LOAD_GLOBAL              0 (a)
              3 RETURN_VALUE

<code object <module> at 0x10485c300, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 1>
  1           0 LOAD_CONST               0 (<code object replace_globals at 0x103b95f60, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 1>)
              3 LOAD_CONST               1 ('replace_globals')
              6 MAKE_FUNCTION            0
              9 STORE_NAME               0 (replace_globals)

 26          12 LOAD_CONST               2 (<code object f at 0x103b95b70, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 26>)
             15 LOAD_CONST               3 ('f')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               1 (f)

 31          24 LOAD_CONST               4 (<code object g at 0x10485c6f0, file "<tests.test_functions.TestFunctions.test_different_globals_may_have_different_builtins>", line 31>)
             27 LOAD_CONST               5 ('g')
             30 MAKE_FUNCTION            0
             33 STORE_NAME               2 (g)

 36          36 LOAD_NAME                0 (replace_globals)
             39 LOAD_NAME                2 (g)
             42 LOAD_CONST               6 ('__builtins__')
             45 LOAD_CONST               7 ('a')
             48 LOAD_CONST               8 (2)
             51 BUILD_MAP                1
             54 BUILD_MAP                1
             57 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             60 STORE_NAME               2 (g)

 37          63 LOAD_NAME                0 (replace_globals)
             66 LOAD_NAME                1 (f)
             69 LOAD_CONST               6 ('__builtins__')
             72 LOAD_CONST               7 ('a')
             75 LOAD_CONST               9 (1)
             78 BUILD_MAP                1
             81 LOAD_CONST               5 ('g')
             84 LOAD_NAME                2 (g)
             87 BUILD_MAP                2
             90 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             93 STORE_NAME               1 (f)

 40          96 LOAD_NAME                1 (f)
             99 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
            102 POP_TOP
            103 LOAD_CONST              10 (None)
            106 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: 'int' object is not callable
________________________ TestFunctions.test_no_builtins ________________________

self = <tests.test_functions.TestFunctions testMethod=test_no_builtins>

    def test_no_builtins(self):
        self.assert_ok("""\
            def replace_globals(f, new_globals):
                import sys
    
    
                if sys.version_info.major == 2:
                    args = [
                        f.func_code,
                        new_globals,
                        f.func_name,
                        f.func_defaults,
                        f.func_closure,
                    ]
                else:
                    args = [
                        f.__code__,
                        new_globals,
                        f.__name__,
                        f.__defaults__,
                        f.__closure__,
                    ]
                if hasattr(f, '_vm'):
                    name = args.remove(args[2])
                    args.insert(0, name)
                    args.append(f._vm)
                return type(lambda: None)(*args)
    
    
            def f(NameError=NameError, AssertionError=AssertionError):
                # capture NameError and AssertionError early because
                #  we are deleting the builtins
                None
                try:
                    sum
                except NameError:
                    pass
                else:
                    raise AssertionError('sum in the builtins')
    
    
            f = replace_globals(f, {})  # no builtins provided
            f()
>           """)

tests/test_functions.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: "'Function' object has no attribute '__code__'" != 'None'
E   - 'Function' object has no attribute '__code__'
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <lambda> at 0x103b95ae0, file "<tests.test_functions.TestFunctions.test_no_builtins>", line 25>
 25           0 LOAD_CONST               0 (None)
              3 RETURN_VALUE

<code object replace_globals at 0x103b95780, file "<tests.test_functions.TestFunctions.test_no_builtins>", line 1>
  2           0 LOAD_CONST               1 (0)
              3 LOAD_CONST               0 (None)
              6 IMPORT_NAME              0 (sys)
              9 STORE_FAST               2 (sys)

  5          12 LOAD_FAST                2 (sys)
             15 LOAD_ATTR                1 (version_info)
             18 LOAD_ATTR                2 (major)
             21 LOAD_CONST               2 (2)
             24 COMPARE_OP               2 (==)
             27 POP_JUMP_IF_FALSE       66

  7          30 LOAD_FAST                0 (f)
             33 LOAD_ATTR                3 (func_code)

  8          36 LOAD_FAST                1 (new_globals)

  9          39 LOAD_FAST                0 (f)
             42 LOAD_ATTR                4 (func_name)

 10          45 LOAD_FAST                0 (f)
             48 LOAD_ATTR                5 (func_defaults)

 11          51 LOAD_FAST                0 (f)
             54 LOAD_ATTR                6 (func_closure)
             57 BUILD_LIST               5
             60 STORE_FAST               3 (args)
             63 JUMP_FORWARD            33 (to 99)

 15     >>   66 LOAD_FAST                0 (f)
             69 LOAD_ATTR                7 (__code__)

 16          72 LOAD_FAST                1 (new_globals)

 17          75 LOAD_FAST                0 (f)
             78 LOAD_ATTR                8 (__name__)

 18          81 LOAD_FAST                0 (f)
             84 LOAD_ATTR                9 (__defaults__)

 19          87 LOAD_FAST                0 (f)
             90 LOAD_ATTR               10 (__closure__)
             93 BUILD_LIST               5
             96 STORE_FAST               3 (args)

 21     >>   99 LOAD_GLOBAL             11 (hasattr)
            102 LOAD_FAST                0 (f)
            105 LOAD_CONST               3 ('_vm')
            108 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
            111 POP_JUMP_IF_FALSE      165

 22         114 LOAD_FAST                3 (args)
            117 LOAD_ATTR               12 (remove)
            120 LOAD_FAST                3 (args)
            123 LOAD_CONST               2 (2)
            126 BINARY_SUBSCR
            127 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
            130 STORE_FAST               4 (name)

 23         133 LOAD_FAST                3 (args)
            136 LOAD_ATTR               13 (insert)
            139 LOAD_CONST               1 (0)
            142 LOAD_FAST                4 (name)
            145 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
            148 POP_TOP

 24         149 LOAD_FAST                3 (args)
            152 LOAD_ATTR               14 (append)
            155 LOAD_FAST                0 (f)
            158 LOAD_ATTR               15 (_vm)
            161 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
            164 POP_TOP

 25     >>  165 LOAD_GLOBAL             16 (type)
            168 LOAD_CONST               4 (<code object <lambda> at 0x103b95ae0, file "<tests.test_functions.TestFunctions.test_no_builtins>", line 25>)
            171 LOAD_CONST               5 ('replace_globals.<locals>.<lambda>')
            174 MAKE_FUNCTION            0
            177 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
            180 LOAD_FAST                3 (args)
            183 CALL_FUNCTION_VAR        0 (0 positional, 0 keyword pair)
            186 RETURN_VALUE

<code object f at 0x103ba5030, file "<tests.test_functions.TestFunctions.test_no_builtins>", line 28>
 31           0 LOAD_CONST               0 (None)
              3 POP_TOP

 32           4 SETUP_EXCEPT             8 (to 15)

 33           7 LOAD_GLOBAL              0 (sum)
             10 POP_TOP
             11 POP_BLOCK
             12 JUMP_FORWARD            18 (to 33)

 34     >>   15 DUP_TOP
             16 LOAD_FAST                0 (NameError)
             19 COMPARE_OP              10 (exception match)
             22 POP_JUMP_IF_FALSE       32
             25 POP_TOP
             26 POP_TOP
             27 POP_TOP

 35          28 POP_EXCEPT
             29 JUMP_FORWARD            13 (to 45)
        >>   32 END_FINALLY

 37     >>   33 LOAD_FAST                1 (AssertionError)
             36 LOAD_CONST               1 ('sum in the builtins')
             39 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             42 RAISE_VARARGS            1
        >>   45 LOAD_CONST               0 (None)
             48 RETURN_VALUE

<code object <module> at 0x103ba5660, file "<tests.test_functions.TestFunctions.test_no_builtins>", line 1>
  1           0 LOAD_CONST               0 (<code object replace_globals at 0x103b95780, file "<tests.test_functions.TestFunctions.test_no_builtins>", line 1>)
              3 LOAD_CONST               1 ('replace_globals')
              6 MAKE_FUNCTION            0
              9 STORE_NAME               0 (replace_globals)

 28          12 LOAD_NAME                1 (NameError)
             15 LOAD_NAME                2 (AssertionError)
             18 LOAD_CONST               2 (<code object f at 0x103ba5030, file "<tests.test_functions.TestFunctions.test_no_builtins>", line 28>)
             21 LOAD_CONST               3 ('f')
             24 MAKE_FUNCTION            2
             27 STORE_NAME               3 (f)

 40          30 LOAD_NAME                0 (replace_globals)
             33 LOAD_NAME                3 (f)
             36 BUILD_MAP                0
             39 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             42 STORE_NAME               3 (f)

 41          45 LOAD_NAME                3 (f)
             48 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             51 POP_TOP
             52 LOAD_CONST               4 (None)
             55 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 527, in byte_LOAD_ATTR
    val = getattr(obj, attr)
AttributeError: 'Function' object has no attribute '__code__'
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 67, in __call__
    retval = self._vm.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 527, in byte_LOAD_ATTR
    val = getattr(obj, attr)
AttributeError: 'Function' object has no attribute '__code__'
___________ TestGenerators.test_distinguish_iterators_and_generators ___________

self = <tests.test_functions.TestGenerators testMethod=test_distinguish_iterators_and_generators>

    def test_distinguish_iterators_and_generators(self):
        self.assert_ok("""\
            class Foo(object):
                def __iter__(self):
                    return FooIter()
    
            class FooIter(object):
                def __init__(self):
                    self.state = 0
    
                def __next__(self):
                    if self.state >= 10:
                        raise StopIteration
                    self.state += 1
                    return self.state
    
                def send(self, n):
                    print("sending")
    
            def outer():
                yield from Foo()
    
            for x in outer():
                print(x)
>           """)

tests/test_functions.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object __iter__ at 0x103ba55d0, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 2>
  3           0 LOAD_GLOBAL              0 (FooIter)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 RETURN_VALUE

<code object Foo at 0x1048f2660, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Foo')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST               1 (<code object __iter__ at 0x103ba55d0, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 2>)
             15 LOAD_CONST               2 ('Foo.__iter__')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (__iter__)
             24 LOAD_CONST               3 (None)
             27 RETURN_VALUE

<code object __init__ at 0x1048f2d20, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 6>
  7           0 LOAD_CONST               1 (0)
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (state)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE

<code object __next__ at 0x1048f2db0, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 9>
 10           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (state)
              6 LOAD_CONST               1 (10)
              9 COMPARE_OP               5 (>=)
             12 POP_JUMP_IF_FALSE       21

 11          15 LOAD_GLOBAL              1 (StopIteration)
             18 RAISE_VARARGS            1

 12     >>   21 LOAD_FAST                0 (self)
             24 DUP_TOP
             25 LOAD_ATTR                0 (state)
             28 LOAD_CONST               2 (1)
             31 INPLACE_ADD
             32 ROT_TWO
             33 STORE_ATTR               0 (state)

 13          36 LOAD_FAST                0 (self)
             39 LOAD_ATTR                0 (state)
             42 RETURN_VALUE

<code object send at 0x1048f2e40, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 15>
 16           0 LOAD_GLOBAL              0 (print)
              3 LOAD_CONST               1 ('sending')
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
              9 POP_TOP
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE

<code object FooIter at 0x1048f2ed0, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 5>
  5           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('FooIter')
              9 STORE_NAME               2 (__qualname__)

  6          12 LOAD_CONST               1 (<code object __init__ at 0x1048f2d20, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 6>)
             15 LOAD_CONST               2 ('FooIter.__init__')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               3 (__init__)

  9          24 LOAD_CONST               3 (<code object __next__ at 0x1048f2db0, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 9>)
             27 LOAD_CONST               4 ('FooIter.__next__')
             30 MAKE_FUNCTION            0
             33 STORE_NAME               4 (__next__)

 15          36 LOAD_CONST               5 (<code object send at 0x1048f2e40, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 15>)
             39 LOAD_CONST               6 ('FooIter.send')
             42 MAKE_FUNCTION            0
             45 STORE_NAME               5 (send)
             48 LOAD_CONST               7 (None)
             51 RETURN_VALUE

<code object outer at 0x1048f2f60, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 18>
 19           0 LOAD_GLOBAL              0 (Foo)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 GET_YIELD_FROM_ITER
              7 LOAD_CONST               0 (None)
             10 YIELD_FROM
             11 POP_TOP
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE

<code object <module> at 0x1048d4030, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Foo at 0x1048f2660, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 1>)
              4 LOAD_CONST               1 ('Foo')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Foo')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Foo)

  5          22 LOAD_BUILD_CLASS
             23 LOAD_CONST               2 (<code object FooIter at 0x1048f2ed0, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 5>)
             26 LOAD_CONST               3 ('FooIter')
             29 MAKE_FUNCTION            0
             32 LOAD_CONST               3 ('FooIter')
             35 LOAD_NAME                0 (object)
             38 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             41 STORE_NAME               2 (FooIter)

 18          44 LOAD_CONST               4 (<code object outer at 0x1048f2f60, file "<tests.test_functions.TestGenerators.test_distinguish_iterators_and_generators>", line 18>)
             47 LOAD_CONST               5 ('outer')
             50 MAKE_FUNCTION            0
             53 STORE_NAME               3 (outer)

 21          56 SETUP_LOOP              27 (to 86)
             59 LOAD_NAME                3 (outer)
             62 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             65 GET_ITER
        >>   66 FOR_ITER                16 (to 85)
             69 STORE_NAME               4 (x)

 22          72 LOAD_NAME                5 (print)
             75 LOAD_NAME                4 (x)
             78 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             81 POP_TOP
             82 JUMP_ABSOLUTE           66
        >>   85 POP_BLOCK
        >>   86 LOAD_CONST               6 (None)
             89 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
_________________ TestGenerators.test_generator_from_generator _________________

self = <tests.test_functions.TestGenerators testMethod=test_generator_from_generator>

    def test_generator_from_generator(self):
        self.assert_ok("""\
            g = (x*x for x in range(5))
            h = (y+1 for y in g)
            print(list(h))
>           """)

tests/test_functions.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: 'unsupported callable' != 'None'
E   - unsupported callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <genexpr> at 0x1048f26f0, file "<tests.test_functions.TestGenerators.test_generator_from_generator>", line 1>
  1           0 LOAD_FAST                0 (.0)
        >>    3 FOR_ITER                15 (to 21)
              6 STORE_FAST               1 (x)
              9 LOAD_FAST                1 (x)
             12 LOAD_FAST                1 (x)
             15 BINARY_MULTIPLY
             16 YIELD_VALUE
             17 POP_TOP
             18 JUMP_ABSOLUTE            3
        >>   21 LOAD_CONST               0 (None)
             24 RETURN_VALUE

<code object <genexpr> at 0x1048f2150, file "<tests.test_functions.TestGenerators.test_generator_from_generator>", line 2>
  2           0 LOAD_FAST                0 (.0)
        >>    3 FOR_ITER                15 (to 21)
              6 STORE_FAST               1 (y)
              9 LOAD_FAST                1 (y)
             12 LOAD_CONST               0 (1)
             15 BINARY_ADD
             16 YIELD_VALUE
             17 POP_TOP
             18 JUMP_ABSOLUTE            3
        >>   21 LOAD_CONST               1 (None)
             24 RETURN_VALUE

<code object <module> at 0x1048f28a0, file "<tests.test_functions.TestGenerators.test_generator_from_generator>", line 1>
  1           0 LOAD_CONST               0 (<code object <genexpr> at 0x1048f26f0, file "<tests.test_functions.TestGenerators.test_generator_from_generator>", line 1>)
              3 LOAD_CONST               1 ('<genexpr>')
              6 MAKE_FUNCTION            0
              9 LOAD_NAME                0 (range)
             12 LOAD_CONST               2 (5)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 GET_ITER
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             22 STORE_NAME               1 (g)

  2          25 LOAD_CONST               3 (<code object <genexpr> at 0x1048f2150, file "<tests.test_functions.TestGenerators.test_generator_from_generator>", line 2>)
             28 LOAD_CONST               1 ('<genexpr>')
             31 MAKE_FUNCTION            0
             34 LOAD_NAME                1 (g)
             37 GET_ITER
             38 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             41 STORE_NAME               2 (h)

  3          44 LOAD_NAME                3 (print)
             47 LOAD_NAME                4 (list)
             50 LOAD_NAME                2 (h)
             53 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             56 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             59 POP_TOP
             60 LOAD_CONST               4 (None)
             63 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1094, in getfullargspec
    sigcls=Signature)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2237, in _signature_from_callable
    return _signature_from_function(sigcls, obj)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2108, in _signature_from_function
    kind=_POSITIONAL_OR_KEYWORD))
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2431, in __init__
    raise ValueError('{!r} is not a valid parameter name'.format(name))
ValueError: '.0' is not a valid parameter name

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 57, in __call__
    callargs = inspect.getcallargs(self._func, *args, **kwargs)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1290, in getcallargs
    spec = getfullargspec(func)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1100, in getfullargspec
    raise TypeError('unsupported callable') from ex
TypeError: unsupported callable
________________ TestGenerators.test_generator_from_generator2 _________________

self = <tests.test_functions.TestGenerators testMethod=test_generator_from_generator2>

    def test_generator_from_generator2(self):
        self.assert_ok("""\
            class Thing(object):
                RESOURCES = ('abc', 'def')
                def get_abc(self):
                    return "ABC"
                def get_def(self):
                    return "DEF"
                def resource_info(self):
                    for name in self.RESOURCES:
                        get_name = 'get_' + name
                        yield name, getattr(self, get_name)
    
                def boom(self):
                    #d = list((name, get()) for name, get in self.resource_info())
                    d = [(name, get()) for name, get in self.resource_info()]
                    return d
    
            print(Thing().boom())
>           """)

tests/test_functions.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: '__build_class__: func must be a function' != 'None'
E   - __build_class__: func must be a function
E   + None
----------------------------- Captured stdout call -----------------------------

<code object get_abc at 0x10485c0c0, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 3>
  4           0 LOAD_CONST               1 ('ABC')
              3 RETURN_VALUE

<code object get_def at 0x10485c300, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 5>
  6           0 LOAD_CONST               1 ('DEF')
              3 RETURN_VALUE

<code object resource_info at 0x10485ca50, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 7>
  8           0 SETUP_LOOP              47 (to 50)
              3 LOAD_FAST                0 (self)
              6 LOAD_ATTR                0 (RESOURCES)
              9 GET_ITER
        >>   10 FOR_ITER                36 (to 49)
             13 STORE_FAST               1 (name)

  9          16 LOAD_CONST               1 ('get_')
             19 LOAD_FAST                1 (name)
             22 BINARY_ADD
             23 STORE_FAST               2 (get_name)

 10          26 LOAD_FAST                1 (name)
             29 LOAD_GLOBAL              1 (getattr)
             32 LOAD_FAST                0 (self)
             35 LOAD_FAST                2 (get_name)
             38 CALL_FUNCTION            2 (2 positional, 0 keyword pair)
             41 BUILD_TUPLE              2
             44 YIELD_VALUE
             45 POP_TOP
             46 JUMP_ABSOLUTE           10
        >>   49 POP_BLOCK
        >>   50 LOAD_CONST               0 (None)
             53 RETURN_VALUE

<code object <listcomp> at 0x10485c1e0, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 14>
 14           0 BUILD_LIST               0
              3 LOAD_FAST                0 (.0)
        >>    6 FOR_ITER                27 (to 36)
              9 UNPACK_SEQUENCE          2
             12 STORE_FAST               1 (name)
             15 STORE_FAST               2 (get)
             18 LOAD_FAST                1 (name)
             21 LOAD_FAST                2 (get)
             24 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             27 BUILD_TUPLE              2
             30 LIST_APPEND              2
             33 JUMP_ABSOLUTE            6
        >>   36 RETURN_VALUE

<code object boom at 0x103e30030, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 12>
 14           0 LOAD_CONST               1 (<code object <listcomp> at 0x10485c1e0, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 14>)
              3 LOAD_CONST               2 ('Thing.boom.<locals>.<listcomp>')
              6 MAKE_FUNCTION            0
              9 LOAD_FAST                0 (self)
             12 LOAD_ATTR                0 (resource_info)
             15 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             18 GET_ITER
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             22 STORE_FAST               1 (d)

 15          25 LOAD_FAST                1 (d)
             28 RETURN_VALUE

<code object Thing at 0x103e06ae0, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 1>
  1           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)
              6 LOAD_CONST               0 ('Thing')
              9 STORE_NAME               2 (__qualname__)

  2          12 LOAD_CONST              12 (('abc', 'def'))
             15 STORE_NAME               3 (RESOURCES)

  3          18 LOAD_CONST               3 (<code object get_abc at 0x10485c0c0, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 3>)
             21 LOAD_CONST               4 ('Thing.get_abc')
             24 MAKE_FUNCTION            0
             27 STORE_NAME               4 (get_abc)

  5          30 LOAD_CONST               5 (<code object get_def at 0x10485c300, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 5>)
             33 LOAD_CONST               6 ('Thing.get_def')
             36 MAKE_FUNCTION            0
             39 STORE_NAME               5 (get_def)

  7          42 LOAD_CONST               7 (<code object resource_info at 0x10485ca50, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 7>)
             45 LOAD_CONST               8 ('Thing.resource_info')
             48 MAKE_FUNCTION            0
             51 STORE_NAME               6 (resource_info)

 12          54 LOAD_CONST               9 (<code object boom at 0x103e30030, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 12>)
             57 LOAD_CONST              10 ('Thing.boom')
             60 MAKE_FUNCTION            0
             63 STORE_NAME               7 (boom)
             66 LOAD_CONST              11 (None)
             69 RETURN_VALUE

<code object <module> at 0x103e06a50, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 1>
  1           0 LOAD_BUILD_CLASS
              1 LOAD_CONST               0 (<code object Thing at 0x103e06ae0, file "<tests.test_functions.TestGenerators.test_generator_from_generator2>", line 1>)
              4 LOAD_CONST               1 ('Thing')
              7 MAKE_FUNCTION            0
             10 LOAD_CONST               1 ('Thing')
             13 LOAD_NAME                0 (object)
             16 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             19 STORE_NAME               1 (Thing)

 17          22 LOAD_NAME                2 (print)
             25 LOAD_NAME                1 (Thing)
             28 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             31 LOAD_ATTR                3 (boom)
             34 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             37 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             40 POP_TOP
             41 LOAD_CONST               2 (None)
             44 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
TypeError: __build_class__: func must be a function
____________________ TestGenerators.test_nested_yield_from _____________________

self = <tests.test_functions.TestGenerators testMethod=test_nested_yield_from>

    def test_nested_yield_from(self):
        self.assert_ok("""\
            def main():
                x = outer()
                next(x)
                y = x.send("Hello, World")
                print(y)
    
            def outer():
                yield from middle()
    
            def middle():
                yield from inner()
    
            def inner():
                y = yield
                yield y
    
            main()
>           """)

tests/test_functions.py:441: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:53: in assert_ok
    vm_value = vm.run_code(code)
byterun/pyvm2.py:139: in run_code
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
byterun/pyvm2.py:230: in dispatch
    why = bytecode_fn(*arguments)
byterun/pyvm2.py:855: in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
byterun/pyvm2.py:896: in call_function
    retval = func(*posargs, **namedargs)
byterun/pyobj.py:67: in __call__
    retval = self._vm.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
byterun/pyvm2.py:230: in dispatch
    why = bytecode_fn(*arguments)
byterun/pyvm2.py:855: in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
byterun/pyvm2.py:896: in call_function
    retval = func(*posargs, **namedargs)
byterun/pyobj.py:202: in next
    return self.send(None)
byterun/pyobj.py:209: in send
    val = self.vm.resume_frame(self.gi_frame)
byterun/pyvm2.py:133: in resume_frame
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <byterun.pyvm2.VirtualMachine object at 0x1048a74c8>
byteName = 'GET_YIELD_FROM_ITER', arguments = []

    def dispatch(self, byteName, arguments):
        """ Dispatch by bytename to the corresponding methods.
        Exceptions are caught and set on the virtual machine."""
        why = None
        try:
            if byteName.startswith('UNARY_'):
                self.unaryOperator(byteName[6:])
            elif byteName.startswith('BINARY_'):
                self.binaryOperator(byteName[7:])
            elif byteName.startswith('INPLACE_'):
                self.inplaceOperator(byteName[8:])
            elif 'SLICE+' in byteName:
                self.sliceOperator(byteName)
            else:
                # dispatch
                bytecode_fn = getattr(self, 'byte_%s' % byteName, None)
                if not bytecode_fn:            # pragma: no cover
                    raise VirtualMachineError(
>                       "unknown bytecode type: %s" % byteName
                    )
E                   byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER

byterun/pyvm2.py:228: VirtualMachineError
----------------------------- Captured stdout call -----------------------------

<code object main at 0x10485c030, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 1>
  2           0 LOAD_GLOBAL              0 (outer)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 STORE_FAST               0 (x)

  3           9 LOAD_GLOBAL              1 (next)
             12 LOAD_FAST                0 (x)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 POP_TOP

  4          19 LOAD_FAST                0 (x)
             22 LOAD_ATTR                2 (send)
             25 LOAD_CONST               1 ('Hello, World')
             28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             31 STORE_FAST               1 (y)

  5          34 LOAD_GLOBAL              3 (print)
             37 LOAD_FAST                1 (y)
             40 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             43 POP_TOP
             44 LOAD_CONST               0 (None)
             47 RETURN_VALUE

<code object outer at 0x1048f29c0, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 7>
  8           0 LOAD_GLOBAL              0 (middle)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 GET_YIELD_FROM_ITER
              7 LOAD_CONST               0 (None)
             10 YIELD_FROM
             11 POP_TOP
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE

<code object middle at 0x1048f2c00, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 10>
 11           0 LOAD_GLOBAL              0 (inner)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 GET_YIELD_FROM_ITER
              7 LOAD_CONST               0 (None)
             10 YIELD_FROM
             11 POP_TOP
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE

<code object inner at 0x1048f2390, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 13>
 14           0 LOAD_CONST               0 (None)
              3 YIELD_VALUE
              4 STORE_FAST               0 (y)

 15           7 LOAD_FAST                0 (y)
             10 YIELD_VALUE
             11 POP_TOP
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE

<code object <module> at 0x1048f2e40, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 1>
  1           0 LOAD_CONST               0 (<code object main at 0x10485c030, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 1>)
              3 LOAD_CONST               1 ('main')
              6 MAKE_FUNCTION            0
              9 STORE_NAME               0 (main)

  7          12 LOAD_CONST               2 (<code object outer at 0x1048f29c0, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 7>)
             15 LOAD_CONST               3 ('outer')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               1 (outer)

 10          24 LOAD_CONST               4 (<code object middle at 0x1048f2c00, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 10>)
             27 LOAD_CONST               5 ('middle')
             30 MAKE_FUNCTION            0
             33 STORE_NAME               2 (middle)

 13          36 LOAD_CONST               6 (<code object inner at 0x1048f2390, file "<tests.test_functions.TestGenerators.test_nested_yield_from>", line 13>)
             39 LOAD_CONST               7 ('inner')
             42 MAKE_FUNCTION            0
             45 STORE_NAME               3 (inner)

 17          48 LOAD_NAME                0 (main)
             51 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             54 POP_TOP
             55 LOAD_CONST               8 (None)
             58 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 202, in next
    return self.send(None)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 209, in send
    val = self.vm.resume_frame(self.gi_frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 133, in resume_frame
    val = self.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 67, in __call__
    retval = self._vm.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 202, in next
    return self.send(None)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 209, in send
    val = self.vm.resume_frame(self.gi_frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 133, in resume_frame
    val = self.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
__________ TestGenerators.test_return_from_generator_with_yield_from ___________

self = <tests.test_functions.TestGenerators testMethod=test_return_from_generator_with_yield_from>

    def test_return_from_generator_with_yield_from(self):
        self.assert_ok("""\
            def returner():
                if False:
                    yield
                return 1
    
            def main():
                y = yield from returner()
                print(y)
    
            list(main())
>       """)

tests/test_functions.py:470: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:53: in assert_ok
    vm_value = vm.run_code(code)
byterun/pyvm2.py:139: in run_code
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
byterun/pyvm2.py:230: in dispatch
    why = bytecode_fn(*arguments)
byterun/pyvm2.py:855: in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
byterun/pyvm2.py:896: in call_function
    retval = func(*posargs, **namedargs)
byterun/pyobj.py:202: in next
    return self.send(None)
byterun/pyobj.py:209: in send
    val = self.vm.resume_frame(self.gi_frame)
byterun/pyvm2.py:133: in resume_frame
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <byterun.pyvm2.VirtualMachine object at 0x1048e8908>
byteName = 'GET_YIELD_FROM_ITER', arguments = []

    def dispatch(self, byteName, arguments):
        """ Dispatch by bytename to the corresponding methods.
        Exceptions are caught and set on the virtual machine."""
        why = None
        try:
            if byteName.startswith('UNARY_'):
                self.unaryOperator(byteName[6:])
            elif byteName.startswith('BINARY_'):
                self.binaryOperator(byteName[7:])
            elif byteName.startswith('INPLACE_'):
                self.inplaceOperator(byteName[8:])
            elif 'SLICE+' in byteName:
                self.sliceOperator(byteName)
            else:
                # dispatch
                bytecode_fn = getattr(self, 'byte_%s' % byteName, None)
                if not bytecode_fn:            # pragma: no cover
                    raise VirtualMachineError(
>                       "unknown bytecode type: %s" % byteName
                    )
E                   byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER

byterun/pyvm2.py:228: VirtualMachineError
----------------------------- Captured stdout call -----------------------------

<code object returner at 0x103e06a50, file "<tests.test_functions.TestGenerators.test_return_from_generator_with_yield_from>", line 1>
  4           0 LOAD_CONST               1 (1)
              3 RETURN_VALUE

<code object main at 0x1048f20c0, file "<tests.test_functions.TestGenerators.test_return_from_generator_with_yield_from>", line 6>
  7           0 LOAD_GLOBAL              0 (returner)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 GET_YIELD_FROM_ITER
              7 LOAD_CONST               0 (None)
             10 YIELD_FROM
             11 STORE_FAST               0 (y)

  8          14 LOAD_GLOBAL              1 (print)
             17 LOAD_FAST                0 (y)
             20 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             23 POP_TOP
             24 LOAD_CONST               0 (None)
             27 RETURN_VALUE

<code object <module> at 0x1048f2b70, file "<tests.test_functions.TestGenerators.test_return_from_generator_with_yield_from>", line 1>
  1           0 LOAD_CONST               0 (<code object returner at 0x103e06a50, file "<tests.test_functions.TestGenerators.test_return_from_generator_with_yield_from>", line 1>)
              3 LOAD_CONST               1 ('returner')
              6 MAKE_FUNCTION            0
              9 STORE_NAME               0 (returner)

  6          12 LOAD_CONST               2 (<code object main at 0x1048f20c0, file "<tests.test_functions.TestGenerators.test_return_from_generator_with_yield_from>", line 6>)
             15 LOAD_CONST               3 ('main')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               1 (main)

 10          24 LOAD_NAME                2 (list)
             27 LOAD_NAME                1 (main)
             30 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             33 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             36 POP_TOP
             37 LOAD_CONST               4 (None)
             40 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 202, in next
    return self.send(None)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 209, in send
    val = self.vm.resume_frame(self.gi_frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 133, in resume_frame
    val = self.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
_____________________ TestGenerators.test_simple_generator _____________________

self = <tests.test_functions.TestGenerators testMethod=test_simple_generator>

    def test_simple_generator(self):
        self.assert_ok("""\
            g = (x for x in [0,1,2])
            print(list(g))
>           """)

tests/test_functions.py:336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:85: in assert_ok
    self.assert_same_exception(vm_exc, py_exc)
tests/vmtest.py:95: in assert_same_exception
    self.assertEqual(str(e1), str(e2))
E   AssertionError: 'unsupported callable' != 'None'
E   - unsupported callable
E   + None
----------------------------- Captured stdout call -----------------------------

<code object <genexpr> at 0x103b99030, file "<tests.test_functions.TestGenerators.test_simple_generator>", line 1>
  1           0 LOAD_FAST                0 (.0)
        >>    3 FOR_ITER                11 (to 17)
              6 STORE_FAST               1 (x)
              9 LOAD_FAST                1 (x)
             12 YIELD_VALUE
             13 POP_TOP
             14 JUMP_ABSOLUTE            3
        >>   17 LOAD_CONST               0 (None)
             20 RETURN_VALUE

<code object <module> at 0x103b990c0, file "<tests.test_functions.TestGenerators.test_simple_generator>", line 1>
  1           0 LOAD_CONST               0 (<code object <genexpr> at 0x103b99030, file "<tests.test_functions.TestGenerators.test_simple_generator>", line 1>)
              3 LOAD_CONST               1 ('<genexpr>')
              6 MAKE_FUNCTION            0
              9 LOAD_CONST               2 (0)
             12 LOAD_CONST               3 (1)
             15 LOAD_CONST               4 (2)
             18 BUILD_LIST               3
             21 GET_ITER
             22 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             25 STORE_NAME               0 (g)

  2          28 LOAD_NAME                1 (print)
             31 LOAD_NAME                2 (list)
             34 LOAD_NAME                0 (g)
             37 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             40 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             43 POP_TOP
             44 LOAD_CONST               5 (None)
             47 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1094, in getfullargspec
    sigcls=Signature)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2237, in _signature_from_callable
    return _signature_from_function(sigcls, obj)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2108, in _signature_from_function
    kind=_POSITIONAL_OR_KEYWORD))
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 2431, in __init__
    raise ValueError('{!r} is not a valid parameter name'.format(name))
ValueError: '.0' is not a valid parameter name

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 57, in __call__
    callargs = inspect.getcallargs(self._func, *args, **kwargs)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1290, in getcallargs
    spec = getfullargspec(func)
  File "/Users/gpbu50235/.pyenv/versions/3.5.10/lib/python3.5/inspect.py", line 1100, in getfullargspec
    raise TypeError('unsupported callable') from ex
TypeError: unsupported callable
________________________ TestGenerators.test_yield_from ________________________

self = <tests.test_functions.TestGenerators testMethod=test_yield_from>

    def test_yield_from(self):
        self.assert_ok("""\
            def main():
                x = outer()
                next(x)
                y = x.send("Hello, World")
                print(y)
    
            def outer():
                yield from inner()
    
            def inner():
                y = yield
                yield y
    
            main()
>           """)

tests/test_functions.py:382: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:53: in assert_ok
    vm_value = vm.run_code(code)
byterun/pyvm2.py:139: in run_code
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
byterun/pyvm2.py:230: in dispatch
    why = bytecode_fn(*arguments)
byterun/pyvm2.py:855: in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
byterun/pyvm2.py:896: in call_function
    retval = func(*posargs, **namedargs)
byterun/pyobj.py:67: in __call__
    retval = self._vm.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
byterun/pyvm2.py:230: in dispatch
    why = bytecode_fn(*arguments)
byterun/pyvm2.py:855: in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
byterun/pyvm2.py:896: in call_function
    retval = func(*posargs, **namedargs)
byterun/pyobj.py:202: in next
    return self.send(None)
byterun/pyobj.py:209: in send
    val = self.vm.resume_frame(self.gi_frame)
byterun/pyvm2.py:133: in resume_frame
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <byterun.pyvm2.VirtualMachine object at 0x1048a2108>
byteName = 'GET_YIELD_FROM_ITER', arguments = []

    def dispatch(self, byteName, arguments):
        """ Dispatch by bytename to the corresponding methods.
        Exceptions are caught and set on the virtual machine."""
        why = None
        try:
            if byteName.startswith('UNARY_'):
                self.unaryOperator(byteName[6:])
            elif byteName.startswith('BINARY_'):
                self.binaryOperator(byteName[7:])
            elif byteName.startswith('INPLACE_'):
                self.inplaceOperator(byteName[8:])
            elif 'SLICE+' in byteName:
                self.sliceOperator(byteName)
            else:
                # dispatch
                bytecode_fn = getattr(self, 'byte_%s' % byteName, None)
                if not bytecode_fn:            # pragma: no cover
                    raise VirtualMachineError(
>                       "unknown bytecode type: %s" % byteName
                    )
E                   byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER

byterun/pyvm2.py:228: VirtualMachineError
----------------------------- Captured stdout call -----------------------------

<code object main at 0x10485c1e0, file "<tests.test_functions.TestGenerators.test_yield_from>", line 1>
  2           0 LOAD_GLOBAL              0 (outer)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 STORE_FAST               0 (x)

  3           9 LOAD_GLOBAL              1 (next)
             12 LOAD_FAST                0 (x)
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             18 POP_TOP

  4          19 LOAD_FAST                0 (x)
             22 LOAD_ATTR                2 (send)
             25 LOAD_CONST               1 ('Hello, World')
             28 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             31 STORE_FAST               1 (y)

  5          34 LOAD_GLOBAL              3 (print)
             37 LOAD_FAST                1 (y)
             40 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             43 POP_TOP
             44 LOAD_CONST               0 (None)
             47 RETURN_VALUE

<code object outer at 0x10485c270, file "<tests.test_functions.TestGenerators.test_yield_from>", line 7>
  8           0 LOAD_GLOBAL              0 (inner)
              3 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              6 GET_YIELD_FROM_ITER
              7 LOAD_CONST               0 (None)
             10 YIELD_FROM
             11 POP_TOP
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE

<code object inner at 0x10485c6f0, file "<tests.test_functions.TestGenerators.test_yield_from>", line 10>
 11           0 LOAD_CONST               0 (None)
              3 YIELD_VALUE
              4 STORE_FAST               0 (y)

 12           7 LOAD_FAST                0 (y)
             10 YIELD_VALUE
             11 POP_TOP
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE

<code object <module> at 0x10485ca50, file "<tests.test_functions.TestGenerators.test_yield_from>", line 1>
  1           0 LOAD_CONST               0 (<code object main at 0x10485c1e0, file "<tests.test_functions.TestGenerators.test_yield_from>", line 1>)
              3 LOAD_CONST               1 ('main')
              6 MAKE_FUNCTION            0
              9 STORE_NAME               0 (main)

  7          12 LOAD_CONST               2 (<code object outer at 0x10485c270, file "<tests.test_functions.TestGenerators.test_yield_from>", line 7>)
             15 LOAD_CONST               3 ('outer')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               1 (outer)

 10          24 LOAD_CONST               4 (<code object inner at 0x10485c6f0, file "<tests.test_functions.TestGenerators.test_yield_from>", line 10>)
             27 LOAD_CONST               5 ('inner')
             30 MAKE_FUNCTION            0
             33 STORE_NAME               2 (inner)

 14          36 LOAD_NAME                0 (main)
             39 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             42 POP_TOP
             43 LOAD_CONST               6 (None)
             46 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 202, in next
    return self.send(None)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 209, in send
    val = self.vm.resume_frame(self.gi_frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 133, in resume_frame
    val = self.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 67, in __call__
    retval = self._vm.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 202, in next
    return self.send(None)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 209, in send
    val = self.vm.resume_frame(self.gi_frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 133, in resume_frame
    val = self.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
_____________________ TestGenerators.test_yield_from_tuple _____________________

self = <tests.test_functions.TestGenerators testMethod=test_yield_from_tuple>

    def test_yield_from_tuple(self):
        self.assert_ok("""\
            def main():
                for x in outer():
                    print(x)
    
            def outer():
                yield from (1, 2, 3, 4)
    
            main()
>           """)

tests/test_functions.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/vmtest.py:53: in assert_ok
    vm_value = vm.run_code(code)
byterun/pyvm2.py:139: in run_code
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
byterun/pyvm2.py:230: in dispatch
    why = bytecode_fn(*arguments)
byterun/pyvm2.py:855: in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
byterun/pyvm2.py:896: in call_function
    retval = func(*posargs, **namedargs)
byterun/pyobj.py:67: in __call__
    retval = self._vm.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
byterun/pyvm2.py:230: in dispatch
    why = bytecode_fn(*arguments)
byterun/pyvm2.py:695: in byte_FOR_ITER
    v = next(iterobj)
byterun/pyobj.py:202: in next
    return self.send(None)
byterun/pyobj.py:209: in send
    val = self.vm.resume_frame(self.gi_frame)
byterun/pyvm2.py:133: in resume_frame
    val = self.run_frame(frame)
byterun/pyvm2.py:322: in run_frame
    raise exc_value.with_traceback(exc_traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <byterun.pyvm2.VirtualMachine object at 0x10485ff08>
byteName = 'GET_YIELD_FROM_ITER', arguments = []

    def dispatch(self, byteName, arguments):
        """ Dispatch by bytename to the corresponding methods.
        Exceptions are caught and set on the virtual machine."""
        why = None
        try:
            if byteName.startswith('UNARY_'):
                self.unaryOperator(byteName[6:])
            elif byteName.startswith('BINARY_'):
                self.binaryOperator(byteName[7:])
            elif byteName.startswith('INPLACE_'):
                self.inplaceOperator(byteName[8:])
            elif 'SLICE+' in byteName:
                self.sliceOperator(byteName)
            else:
                # dispatch
                bytecode_fn = getattr(self, 'byte_%s' % byteName, None)
                if not bytecode_fn:            # pragma: no cover
                    raise VirtualMachineError(
>                       "unknown bytecode type: %s" % byteName
                    )
E                   byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER

byterun/pyvm2.py:228: VirtualMachineError
----------------------------- Captured stdout call -----------------------------

<code object main at 0x103b99030, file "<tests.test_functions.TestGenerators.test_yield_from_tuple>", line 1>
  2           0 SETUP_LOOP              27 (to 30)
              3 LOAD_GLOBAL              0 (outer)
              6 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
              9 GET_ITER
        >>   10 FOR_ITER                16 (to 29)
             13 STORE_FAST               0 (x)

  3          16 LOAD_GLOBAL              1 (print)
             19 LOAD_FAST                0 (x)
             22 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             25 POP_TOP
             26 JUMP_ABSOLUTE           10
        >>   29 POP_BLOCK
        >>   30 LOAD_CONST               0 (None)
             33 RETURN_VALUE

<code object outer at 0x103b990c0, file "<tests.test_functions.TestGenerators.test_yield_from_tuple>", line 5>
  6           0 LOAD_CONST               5 ((1, 2, 3, 4))
              3 GET_YIELD_FROM_ITER
              4 LOAD_CONST               0 (None)
              7 YIELD_FROM
              8 POP_TOP
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE

<code object <module> at 0x103b99150, file "<tests.test_functions.TestGenerators.test_yield_from_tuple>", line 1>
  1           0 LOAD_CONST               0 (<code object main at 0x103b99030, file "<tests.test_functions.TestGenerators.test_yield_from_tuple>", line 1>)
              3 LOAD_CONST               1 ('main')
              6 MAKE_FUNCTION            0
              9 STORE_NAME               0 (main)

  5          12 LOAD_CONST               2 (<code object outer at 0x103b990c0, file "<tests.test_functions.TestGenerators.test_yield_from_tuple>", line 5>)
             15 LOAD_CONST               3 ('outer')
             18 MAKE_FUNCTION            0
             21 STORE_NAME               1 (outer)

  8          24 LOAD_NAME                0 (main)
             27 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             30 POP_TOP
             31 LOAD_CONST               4 (None)
             34 RETURN_VALUE
-- stdout ----------
------------------------------ Captured log call -------------------------------
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 695, in byte_FOR_ITER
    v = next(iterobj)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 202, in next
    return self.send(None)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 209, in send
    val = self.vm.resume_frame(self.gi_frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 133, in resume_frame
    val = self.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
ERROR    byterun.pyvm2:pyvm2.py:235 Caught exception during execution
Traceback (most recent call last):
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 855, in byte_CALL_FUNCTION
    return self.call_function(arg, [], {})
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 896, in call_function
    retval = func(*posargs, **namedargs)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 67, in __call__
    retval = self._vm.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 230, in dispatch
    why = bytecode_fn(*arguments)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 695, in byte_FOR_ITER
    v = next(iterobj)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 202, in next
    return self.send(None)
  File "/Users/gpbu50235/byterun/byterun/pyobj.py", line 209, in send
    val = self.vm.resume_frame(self.gi_frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 133, in resume_frame
    val = self.run_frame(frame)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 322, in run_frame
    raise exc_value.with_traceback(exc_traceback)
  File "/Users/gpbu50235/byterun/byterun/pyvm2.py", line 228, in dispatch
    "unknown bytecode type: %s" % byteName
byterun.pyvm2.VirtualMachineError: unknown bytecode type: GET_YIELD_FROM_ITER
=========================== short test summary info ============================
FAILED tests/test_basic.py::TestIt::test_attribute_access - AssertionError: '...
FAILED tests/test_basic.py::TestIt::test_bound_methods - AssertionError: '__b...
FAILED tests/test_basic.py::TestIt::test_building_stuff - AssertionError: "'i...
FAILED tests/test_basic.py::TestIt::test_calling_methods_wrong - AssertionErr...
FAILED tests/test_basic.py::TestIt::test_calling_subclass_methods - Assertion...
FAILED tests/test_basic.py::TestIt::test_classes - AssertionError: '__build_c...
FAILED tests/test_basic.py::TestIt::test_data_descriptors_precede_instance_attributes
FAILED tests/test_basic.py::TestIt::test_dict_comprehension - AssertionError:...
FAILED tests/test_basic.py::TestIt::test_generator_expression - AssertionErro...
FAILED tests/test_basic.py::TestIt::test_instance_attrs_precede_non_data_descriptors
FAILED tests/test_basic.py::TestIt::test_list_comprehension - AssertionError:...
FAILED tests/test_basic.py::TestIt::test_multiple_classes - AssertionError: '...
FAILED tests/test_basic.py::TestIt::test_object_attrs_not_shared_with_class
FAILED tests/test_basic.py::TestIt::test_set_comprehension - AssertionError: ...
FAILED tests/test_basic.py::TestIt::test_staticmethods - AssertionError: '__b...
FAILED tests/test_basic.py::TestIt::test_subclass_attribute - AssertionError:...
FAILED tests/test_basic.py::TestIt::test_subclass_attributes_dynamic - Assert...
FAILED tests/test_basic.py::TestIt::test_subclass_attributes_not_shared - Ass...
FAILED tests/test_basic.py::TestIt::test_unbound_methods - AssertionError: '_...
FAILED tests/test_functions.py::TestFunctions::test_calling_functions_with_args_kwargs
FAILED tests/test_functions.py::TestFunctions::test_different_globals_may_have_different_builtins
FAILED tests/test_functions.py::TestFunctions::test_no_builtins - AssertionEr...
FAILED tests/test_functions.py::TestGenerators::test_distinguish_iterators_and_generators
FAILED tests/test_functions.py::TestGenerators::test_generator_from_generator
FAILED tests/test_functions.py::TestGenerators::test_generator_from_generator2
FAILED tests/test_functions.py::TestGenerators::test_nested_yield_from - byte...
FAILED tests/test_functions.py::TestGenerators::test_return_from_generator_with_yield_from
FAILED tests/test_functions.py::TestGenerators::test_simple_generator - Asser...
FAILED tests/test_functions.py::TestGenerators::test_yield_from - byterun.pyv...
FAILED tests/test_functions.py::TestGenerators::test_yield_from_tuple - byter...
======================== 30 failed, 48 passed in 0.40s =========================
